name: Issue Reply

on: 
  issues:
    types: [opened,labeled,edited]
  label:
    types: [created]
  workflow_dispatch:
  
env:
  REPO_NAME: ${{ github.event.repository.name }}
  GH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  
jobs:
  reply-helper:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.pullIssuesPorter.outputs.IMAGE_NAME }}
      SUCCESS: ${{ steps.successCheck.outputs.SUCCESS }}
      REP_NAME: ${{ steps.pullIssuesPorter.outputs.REP_NAME }}
    steps:
      - name: check-issue
        id: check_issue_id
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'check-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          title-includes: 'gcr.io,k8s.gcr.io,ghcr.io'
      - name: get image issues
        id: get_image_issues
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')

            let image_name
            let title
            let issues_author
            let rep_name

            const ev = JSON.parse(
                fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8')
            )

            let issue_number = (ev.issues || { 'number': -1 })['number']

            if (issue_number > 0) {
                const issuesResponse = await github.issues.get({
                    owner: '${{ env.GH_USER }}',
                    repo: '${{ env.REPO_NAME }}',
                    issue_number: issue_number
                })
                title = issuesResponse.title
                console.log('issues opened trigger')
            } else {

                const issuesResponse = await github.issues.listForRepo({
                    owner: '${{ env.GH_USER }}',
                    repo: '${{ env.REPO_NAME }}',
                    state: "open",
                    labels: "image",
                    sort: "created",
                    direction: "desc",
                    per_page: 1
                })
                if (Array.isArray(issuesResponse["data"]) && issuesResponse["data"].length) {
                    title = issuesResponse["data"][0]["title"]
                    issue_number = issuesResponse["data"][0]["number"]
                    issues_author = issuesResponse["data"][0]["user"]["login"]
                }
                console.log("schedule trigger")
            }

            //
            const conditions = ["gcr.io", "k8s.gcr.io", "ghcr.io"];

            if (issue_number > 0) {
                image_name = title.trim()
                issues_body = ''
                is_error = false
                error_message = ''
                if (image_name.includes("@")) {
                    // 不支持带摘要 k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
                    is_error = true
                    issues_body = '@' + issues_author + ' 拉取镜像不支持带摘要信息，请去除 @部分'
                    error_message = issues_body;
                } else if (!condition.find(item => image_name.includes(item))) {
                    // 只支持 gcr.io,k8s.gcr.io,ghcr.io
                    is_error = true
                    issues_body = '@' + issues_author + ' 目前只支持 gcr.io,k8s.gcr.io,ghcr.io'
                    error_message = issues_body;
                } else {
                    issues_body = '构建进展 [https://github.com/${{ env.GH_USER }}/${{ env.REPO_NAME }}/actions/runs/${{ github.run_id }}](https://github.com/${{ env.GH_USER }}/${{ env.REPO_NAME }}/actions/runs/${{ github.run_id }})'
                }
                const issuesComment = await github.issues.createComment({
                    owner: '${{ env.GH_USER }}',
                    repo: '${{ env.REPO_NAME }}',
                    issue_number: issue_number,
                    body: issues_body
                });
                console.log("create issues comment resp:", issuesComment["status"]);
                console.log("gcr_image from issues is ", image_name, ", issue_number is ", issue_number, ",issues_author is ", issues_author)
                if (is_error) {
                    core.setFailed("Error:" + error_message);
                }
            } else {
                core.setFailed("No Images");
            }

            let idx = image_name.indexOf('/');
            ep_name = image_name.substring(0, idx) + image_name.substring(idx).replace('/', '_');

            core.setOutput('IMAGE_NAME', image_name)
            core.setOutput('ISSUE_NUMBER', issue_number)
            core.setOutput('REP_NAME', rep_name)

            console.log('IMAGE_NAME', image_name)
            console.log('ISSUE_NUMBER', issue_number)
            console.log('REP_NAME', rep_name)
      - name: image
        if: steps.check_issue_id.outputs.check-result == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}. We totally like your proposal/feedback, welcome PR。

            你好 @${{ github.event.issue.user.login }}，我们完全同意你的提议/反馈，欢迎PR。
          
