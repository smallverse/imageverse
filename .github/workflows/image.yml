name: Issue Reply

on: 
  issues:
    types: [opened,labeled,edited]
  label:
    types: [created]
  workflow_dispatch:
  
env:
  REPO_NAME: ${{ github.event.repository.name }}
  GH_USER: smallverse
  
jobs:
  reply-helper:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.get_image_issues.outputs.IMAGE_NAME }}
      SUCCESS: ${{ steps.successCheck.outputs.SUCCESS }}
      REP_NAME: ${{ steps.get_image_issues.outputs.REP_NAME }}
    steps:
      - name: check-issue
        id: check_issue_id
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'check-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          title-includes: 'gcr.io,k8s.gcr.io,ghcr.io'
      - name: get image issues
        if: steps.check_issue_id.outputs.check-result == 'true'
        id: get_image_issues
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')

            let image_name
            let title
            let issues_author
            let rep_name

            const ev = JSON.parse(
                fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8')
            )

            let issue_number = (ev.issues || { 'number': -1 })['number']

            if (issue_number > 0) {
                const issuesResponse = await github.issues.get({
                    owner: '${{ env.GH_USER }}',
                    repo: '${{ env.REPO_NAME }}',
                    issue_number: issue_number
                })
                title = issuesResponse.title
                console.log('issues opened trigger')
            } else {

                const issuesResponse = await github.issues.listForRepo({
                    owner: '${{ env.GH_USER }}',
                    repo: '${{ env.REPO_NAME }}',
                    state: "open",
                    labels: "image",
                    sort: "created",
                    direction: "desc",
                    per_page: 1
                })
                if (Array.isArray(issuesResponse["data"]) && issuesResponse["data"].length) {
                    title = issuesResponse["data"][0]["title"]
                    issue_number = issuesResponse["data"][0]["number"]
                    issues_author = issuesResponse["data"][0]["user"]["login"]
                }
                console.log("schedule trigger")
            }

            //
            const conditions = ["gcr.io", "k8s.gcr.io", "ghcr.io"];

            if (issue_number > 0) {
                image_name = title.trim()
                issues_body = ''
                is_error = false
                error_message = ''
                let idx = image_name.indexOf('/');
                if (image_name.includes("@")) {
                    // 不支持带摘要 k8s.gcr.io/xxx/xxx:v1.1.1@sha256:64dxxx
                    is_error = true
                    issues_body = '@' + issues_author + ' 拉取镜像不支持带摘要信息，请去除 @部分'
                    error_message = issues_body;
                } else if (!conditions.find(item => image_name.includes(item))) {
                    // 只支持 gcr.io,k8s.gcr.io,ghcr.io
                    is_error = true
                    issues_body = '@' + issues_author + ' 目前只支持 gcr.io,k8s.gcr.io,ghcr.io'
                    error_message = issues_body;
                } else if (image_name.length == idx + 1 || idx == -1) {
                    is_error = true
                    issues_body = '@' + issues_author + ' issues title is err:' + image_name
                    error_message = issues_body;
                } else {

                    if (image_name.length > idx + 1) {
                        rep_name = '${{ secrets.DOCKERHUB_USERNAME }}/' + image_name.replace(/\//g, '_');
                    }
                    issues_body = '构建进展 [https://github.com/${{ env.GH_USER }}/${{ env.REPO_NAME }}/actions/runs/${{ github.run_id }}](https://github.com/${{ env.GH_USER }}/${{ env.REPO_NAME }}/actions/runs/${{ github.run_id }})'
                }
                const issuesComment = await github.issues.createComment({
                    owner: '${{ env.GH_USER }}',
                    repo: '${{ env.REPO_NAME }}',
                    issue_number: issue_number,
                    body: issues_body
                });
                console.log("create issues comment resp:", issuesComment["status"]);
                console.log("gcr_image from issues is ", image_name, ", issue_number is ", issue_number, ",issues_author is ", issues_author)
                if (is_error) {
                    core.setFailed("Error:" + error_message);
                }
            } else {
                core.setFailed("No Images");
            }

            core.setOutput('IMAGE_NAME', image_name)
            core.setOutput('ISSUE_NUMBER', issue_number)
            core.setOutput('REP_NAME', rep_name)

            console.log('IMAGE_NAME', image_name)
            console.log('ISSUE_NUMBER', issue_number)
            console.log('REP_NAME', rep_name)
      - name: Login to Docker Hub
        if: steps.get_image_issues.outputs.REP_NAME != ''
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_IMAGEVERSE }}
      - name: pull and push to docker hub
        shell: bash
        run: |
          docker pull ${{ steps.get_image_issues.outputs.IMAGE_NAME }}  
          docker tag  ${{ steps.get_image_issues.outputs.IMAGE_NAME }}  ${{ steps.get_image_issues.outputs.REP_NAME }}      
          docker push ${{ steps.get_image_issues.outputs.REP_NAME }} 
          echo "------ push image end"
      - name: success check
        id: successCheck
        uses: actions/github-script@v3.1.0
        if: ${{ success() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.setOutput('SUCCESS', true)
      - name: Close image Issues
        uses: actions/github-script@v3.1.0
        if: ${{ always() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            if (${{ steps.get_image_issues.outputs.ISSUE_NUMBER }} > 0){
              const issuesResponse =  await github.issues.update({
                owner: '${{ env.GH_USER }}',
                repo: '${{ env.REPO_NAME }}',
                issue_number: ${{ steps.get_image_issues.outputs.ISSUE_NUMBER }},
                state: 'closed'
              })
              console.log("update issues resp:", issuesResponse["status"] == 200 ? "success" : "failed" )
              let body = "转换失败,详见 [构建任务](https://github.com/${{ env.GH_USER }}/${{ env.REPO_NAME }}/actions/runs/${{ github.run_id }})"
              let success = String(${{ steps.successCheck.outputs.SUCCESS }}).toLowerCase() == "true"
              console.log("is success?", success)
              let labels = []
              if(success){
                body = "转换完成 <br/>\n```bash \n#原镜像\n${{ steps.get_image_issues.outputs.IMAGE_NAME }}\n\n\n#转换后镜像\n${{ steps.get_image_issues.outputs.REP_NAME }}\n\n\n#下载并重命名镜像\ndocker pull ${{ steps.get_image_issues.outputs.REP_NAME }}\ndocker tag ${{ steps.get_image_issues.outputs.REP_NAME }} ${{ steps.get_image_issues.outputs.IMAGE_NAME }}\ndocker images | grep $(echo ${{ steps.get_image_issues.outputs.IMAGE_NAME }}|awk -F':' '{print $1}')\n\n\n# 也可以用我写的脚本\nwget https://raw.githubusercontent.com/anjia0532/gcr.io_mirror/master/pull-k8s-image.sh && chmod +x pull-k8s-image.sh\n./pull-k8s-image.sh ${{ steps.get_image_issues.outputs.IMAGE_NAME }}\n```"
                labels=['success']
              }else{
                const jobsResponse =  await github.actions.listJobsForWorkflowRun({
                  owner: '${{ env.GH_USER }}',
                  repo: '${{ env.REPO_NAME }}',
                  run_id: ${{ github.run_id }}
                })
                console.log("jobs",jobsResponse['data'])
                body+="\n\n 日志:\n\n"
                for(let job of jobsResponse['data']['jobs']){
                    body+="- ["+job.name+"]("+job.html_url+")"
                }
                labels=['failed']
              }
              let gcrImg = "${{ steps.pullIssuesPorter.outputs.IMAGE_NAME }}"

              let colonIndex = gcrImg.indexOf(":")
              if (colonIndex > 0) {
                gcrImg = gcrImg.substr(0,colonIndex)
              }
              let names = gcrImg.split("/")
              let registry = names[0]
              names=names.splice(1,5)
              if("k8s.gcr.io" == registry){
                body+="\n\n\n k8s.gcr.io 镜像标签 Api(需梯子) <https://k8s.gcr.io/v2/"+names.join("/")+"/tags/list>\n\n k8s.gcr.io 镜像标签 UI(需梯子) <https://console.cloud.google.com/gcr/images/k8s-artifacts-prod/us/"+names.join("/")+">\n\n"
              }else{
                let uri=names[0]+"/global/"+names.slice(1,5).join("/")

                if(names.length==1){
                  uri="global/"+names[0]
                }
                body+="\n\n\n gcr.io 镜像标签 Api(需梯子) <https://gcr.io/v2/"+names.join("/")+"/tags/list>\n\n gcr.io 镜像标签 UI(需梯子) <https://console.cloud.google.com/gcr/images/"+uri+">\n\n"
              }
              const issuesComment = await github.issues.createComment({
                  owner: '${{ env.GH_USER }}',
                  repo: '${{ env.REPO_NAME }}',
                  issue_number: ${{ steps.pullIssuesPorter.outputs.ISSUE_NUMBER }},
                  body: body
              });
              console.log("create issues comment resp:", issuesComment["status"] == 201 ? "success" : "failed" )
              if(labels){
                await github.issues.addLabels({
                  owner: '${{ env.GH_USER }}',
                  repo: '${{ env.REPO_NAME }}',
                  issue_number: ${{ steps.pullIssuesPorter.outputs.ISSUE_NUMBER }},
                  labels: labels
              });
              }
            }

